// <auto-generated />
using System;
using Guaguero.Persistence.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Guaguero.Persistence.Migrations
{
    [DbContext(typeof(GuagueroContext))]
    [Migration("20250401235541_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Guaguero.Domain.Entities.Logistic.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiscountID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Logistic.DiscountSolicitud", b =>
                {
                    b.Property<int>("SolicitudID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiscountID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SolicitudID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.ToTable("DiscountSolicituds");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Logistic.Routes.Route", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("GeoJSON")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RouteID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Logistic.Routes.WayPoint", b =>
                {
                    b.Property<int>("WayPointID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WayPointID"));

                    b.Property<int>("RouteID")
                        .HasColumnType("int");

                    b.Property<int>("StepIndex")
                        .HasColumnType("int");

                    b.HasKey("WayPointID");

                    b.HasIndex("RouteID");

                    b.HasIndex("StepIndex");

                    b.ToTable("WayPoints");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Sindicatos.Bus", b =>
                {
                    b.Property<int>("BusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusID"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SindicatoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusID");

                    b.HasIndex("SindicatoID");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Sindicatos.CreditPerUser", b =>
                {
                    b.Property<Guid>("CreditPerUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CreditPerUserID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("CustomerUserID");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Sindicatos.Sindicato", b =>
                {
                    b.Property<int>("SindicatoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SindicatoID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SindicatoID");

                    b.HasIndex("Name");

                    b.ToTable("Sindicatos");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Payments.PaymentBase", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuotaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoPago")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentID");

                    b.ToTable("Payments");

                    b.HasDiscriminator<string>("TipoPago").HasValue("PaymentBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Quota", b =>
                {
                    b.Property<Guid>("QuotaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EntryPointWayPointID")
                        .HasColumnType("int");

                    b.Property<int>("EntryStep")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TravelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuotaID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EntryPointWayPointID");

                    b.HasIndex("EntryStep");

                    b.HasIndex("TravelID");

                    b.ToTable("Quotas");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Travel", b =>
                {
                    b.Property<Guid>("TravelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActualStep")
                        .HasColumnType("int");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmpleoyeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Exits")
                        .HasColumnType("int");

                    b.Property<int>("InformalQuotas")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NearestWayPointWayPointID")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerSeat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RouteID")
                        .HasColumnType("int");

                    b.Property<int>("SindicatoID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StepState")
                        .HasColumnType("int");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TravelID");

                    b.HasIndex("BusID");

                    b.HasIndex("EmpleoyeeID");

                    b.HasIndex("NearestWayPointWayPointID");

                    b.HasIndex("RouteID");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.Reload", b =>
                {
                    b.Property<Guid>("ReloadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreditID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreditPerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReloadID");

                    b.HasIndex("CreditID");

                    b.HasIndex("CreditPerUserID");

                    b.ToTable("Reloads");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.UserBase", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("UserBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RouteSindicato", b =>
                {
                    b.Property<int>("RoutesRouteID")
                        .HasColumnType("int");

                    b.Property<int>("SindicatosSindicatoID")
                        .HasColumnType("int");

                    b.HasKey("RoutesRouteID", "SindicatosSindicatoID");

                    b.HasIndex("SindicatosSindicatoID");

                    b.ToTable("SindicatoRoutes", (string)null);
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Payments.CreditPayment", b =>
                {
                    b.HasBaseType("Guaguero.Domain.Entities.Travels.Payments.PaymentBase");

                    b.Property<Guid>("CreditPerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CreditPerUserID");

                    b.HasDiscriminator().HasValue("Balance");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Payments.EfectivePayment", b =>
                {
                    b.HasBaseType("Guaguero.Domain.Entities.Travels.Payments.PaymentBase");

                    b.Property<decimal>("Devolution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Efectivo");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.Customer", b =>
                {
                    b.HasBaseType("Guaguero.Domain.Entities.Users.UserBase");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.HasIndex("DiscountID");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.Employee", b =>
                {
                    b.HasBaseType("Guaguero.Domain.Entities.Users.UserBase");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SindicatoID")
                        .HasColumnType("int");

                    b.HasIndex("SindicatoID");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Logistic.DiscountSolicitud", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Users.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("Guaguero.Domain.Entities.Logistic.DiscountSolicitud", "CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Guaguero.Domain.Entities.Logistic.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("SolicitudID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Logistic.Routes.Route", b =>
                {
                    b.OwnsOne("Guaguero.Domain.Entities.Logistic.Routes.Coordinate", "DestinationPoint", b1 =>
                        {
                            b1.Property<int>("RouteID")
                                .HasColumnType("int");

                            b1.Property<decimal>("Lat")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("Destination_Lat");

                            b1.Property<decimal>("Lng")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("Destination_Lng");

                            b1.HasKey("RouteID");

                            b1.ToTable("Routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteID");
                        });

                    b.OwnsOne("Guaguero.Domain.Entities.Logistic.Routes.Coordinate", "OriginPoint", b1 =>
                        {
                            b1.Property<int>("RouteID")
                                .HasColumnType("int");

                            b1.Property<decimal>("Lat")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("Origin_Lat");

                            b1.Property<decimal>("Lng")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("Origin_Lng");

                            b1.HasKey("RouteID");

                            b1.ToTable("Routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteID");
                        });

                    b.Navigation("DestinationPoint")
                        .IsRequired();

                    b.Navigation("OriginPoint")
                        .IsRequired();
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Logistic.Routes.WayPoint", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Logistic.Routes.Route", null)
                        .WithMany("WayPoints")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Guaguero.Domain.Entities.Logistic.Routes.Coordinate", "Coordinate", b1 =>
                        {
                            b1.Property<int>("WayPointID")
                                .HasColumnType("int");

                            b1.Property<decimal>("Lat")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("WayPoint_Lat");

                            b1.Property<decimal>("Lng")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("WayPoint_Lng");

                            b1.HasKey("WayPointID");

                            b1.ToTable("WayPoints");

                            b1.WithOwner()
                                .HasForeignKey("WayPointID");
                        });

                    b.Navigation("Coordinate")
                        .IsRequired();
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Sindicatos.Bus", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Sindicatos.Sindicato", "Sindicato")
                        .WithMany("Buses")
                        .HasForeignKey("SindicatoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sindicato");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Sindicatos.CreditPerUser", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Users.Customer", null)
                        .WithOne("Credit")
                        .HasForeignKey("Guaguero.Domain.Entities.Sindicatos.CreditPerUser", "CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Guaguero.Domain.Entities.Users.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Payments.PaymentBase", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Travels.Quota", "Quota")
                        .WithOne("Payment")
                        .HasForeignKey("Guaguero.Domain.Entities.Travels.Payments.PaymentBase", "PaymentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quota");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Quota", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Users.Customer", "Customer")
                        .WithMany("Quotas")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Guaguero.Domain.Entities.Logistic.Routes.WayPoint", "EntryPoint")
                        .WithMany()
                        .HasForeignKey("EntryPointWayPointID");

                    b.HasOne("Guaguero.Domain.Entities.Travels.Travel", "Travel")
                        .WithMany("Quotas")
                        .HasForeignKey("TravelID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("EntryPoint");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Travel", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Sindicatos.Bus", "Bus")
                        .WithMany("Travels")
                        .HasForeignKey("BusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Guaguero.Domain.Entities.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpleoyeeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Guaguero.Domain.Entities.Logistic.Routes.WayPoint", "NearestWayPoint")
                        .WithMany()
                        .HasForeignKey("NearestWayPointWayPointID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guaguero.Domain.Entities.Logistic.Routes.Route", "Route")
                        .WithMany("Travels")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Guaguero.Domain.Entities.Logistic.Routes.Coordinate", "ActualLocation", b1 =>
                        {
                            b1.Property<Guid>("TravelID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Lat")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("Actual_Lat");

                            b1.Property<decimal>("Lng")
                                .HasColumnType("decimal(9,6)")
                                .HasColumnName("Actual_Lng");

                            b1.HasKey("TravelID");

                            b1.ToTable("Travels");

                            b1.WithOwner()
                                .HasForeignKey("TravelID");
                        });

                    b.Navigation("ActualLocation")
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Employee");

                    b.Navigation("NearestWayPoint");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.Reload", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Sindicatos.CreditPerUser", "CreditPerUser")
                        .WithMany()
                        .HasForeignKey("CreditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Guaguero.Domain.Entities.Sindicatos.CreditPerUser", null)
                        .WithMany("Reloads")
                        .HasForeignKey("CreditPerUserID");

                    b.Navigation("CreditPerUser");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.UserBase", b =>
                {
                    b.OwnsOne("Guaguero.Domain.Entities.Users.Credential", "Credential", b1 =>
                        {
                            b1.Property<Guid>("UserBaseUserID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PasswordHash")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserBaseUserID");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserBaseUserID");
                        });

                    b.Navigation("Credential")
                        .IsRequired();
                });

            modelBuilder.Entity("RouteSindicato", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Logistic.Routes.Route", null)
                        .WithMany()
                        .HasForeignKey("RoutesRouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guaguero.Domain.Entities.Sindicatos.Sindicato", null)
                        .WithMany()
                        .HasForeignKey("SindicatosSindicatoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Payments.CreditPayment", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Sindicatos.CreditPerUser", "CreditPerUser")
                        .WithMany("Payments")
                        .HasForeignKey("CreditPerUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreditPerUser");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.Customer", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Logistic.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.Employee", b =>
                {
                    b.HasOne("Guaguero.Domain.Entities.Sindicatos.Sindicato", "Sindicato")
                        .WithMany()
                        .HasForeignKey("SindicatoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sindicato");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Logistic.Routes.Route", b =>
                {
                    b.Navigation("Travels");

                    b.Navigation("WayPoints");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Sindicatos.Bus", b =>
                {
                    b.Navigation("Travels");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Sindicatos.CreditPerUser", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Reloads");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Sindicatos.Sindicato", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Quota", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Travels.Travel", b =>
                {
                    b.Navigation("Quotas");
                });

            modelBuilder.Entity("Guaguero.Domain.Entities.Users.Customer", b =>
                {
                    b.Navigation("Credit")
                        .IsRequired();

                    b.Navigation("Quotas");
                });
#pragma warning restore 612, 618
        }
    }
}
